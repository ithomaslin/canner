#!/usr/bin/env node
var _ = require('lodash');
var prog = require('commander');
var fileSave = require('file-save');
var inline_html = require('inline-html');
var path = require('path');
var Q = require('q');

var pkg = require('../package.json');

var build = require('../lib/build');
var init = require('../lib/init');


var arg = process.argv;

// General options
prog
	.version(pkg.version)
	
// initialize the project
prog
	.command('init [source_dir]')
	.description('Create initial files and folders')
	.action(function(dir) {
    dir = dir || process.cwd();
    return init(dir);
	});

// building docs from canner
prog
	.command('build [canner.json]')
	.description('Build a canner from a canner.json')
	.usage('[options] <source to canner.json, default ./canner.json>')
	.option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
	.option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
	.option('-p, --port <port number>', 'Port which your local server start.')
	.action(function(dir) {
		return build.folder(dir, prog, false)
	});

// watching docs from canner
prog
	.command('watch [canner.json]')
	.description('Watching any changes in a canner and recompiled')
	.usage('[options] <source to canner.json, default ./canner.json>')
	.option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
	.option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
	.option('-p, --port <port number>', 'Port which your local server start.')
	.action(function(dir) {
		return build.folder(dir, prog, true)
	});

// make html include files all warp inline
prog
	.command('inline [htmlfile]')
	.description('Make html include files all warp inline')
	.usage('[options] <source to your html, default ./index.html>')
	.option('-m, --minifyall', 'Minify css, html, js, images.')
	.option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
	.option('-n, --filename <filename>', 'Output html file name, default to output.html')
	.action(function(htmlfile) {

		var opt = {
		  "minifyCSS": true,
		  "minifyJS": true,
		  "removeComments":true,
		  "collapseWhitespace": true
		};

		var filename = prog.args[1].filename ? prog.args[1].filename : 'output.html';
		var output = prog.args[1].output ? prog.args[1].output : './';
		var minify = prog.args[1].minifyall ? prog.args[1].minifyall : null;

		if(!minify) {
			opt = null;
		}

		inline_html(path.resolve(process.cwd(), htmlfile), opt, function(result) {
			fileSave(path.resolve(path.join(process.cwd(), output, filename)))
				.write(result);
		});
	});

// if empty
if(_.isEmpty(prog.parse(process.argv).args) && process.argv.length === 2) {
    prog.help();
}

